#!/usr/local/bin/python

import sys
import traceback
from json import load
from pathlib import Path

from oxconnector import get_ox_integration_class
from oxconnector.soap_config import DEFAULT_CONTEXT

APP = 'ox-connector'
NEW_FILES_DIR = Path('/var') / 'lib' / 'univention-appcenter' / 'apps' / APP / 'data' / 'listener'
OLD_FILES_DIR = NEW_FILES_DIR / 'old'

Context = get_ox_integration_class('SOAP', 'Context')
User = get_ox_integration_class('SOAP', 'User')

def load_from_json_file(path):
	'''Just a helper function to get JSON content from a file, if it
	exists'''
	if not path.exists():
		return None
	with path.open() as fd:
		return load(fd)

class TriggerObject(object):
	'''A thin wrapper over a JSON file. Holds all the information from that
	file. May also hold information of this object from a previous run
	(needs a second, backup file for that)'''
	def __init__(self, entry_uuid, object_type, dn, attributes, options):
		self.entry_uuid = entry_uuid
		self.object_type = object_type
		self.dn = dn
		self.attributes = attributes
		self.options = options
		self.old_dn = None
		self.old_attributes = None
		self.old_options = None
		self._old_loaded = False

	def get_old_file_path(self):
		'''Name of the old file. May or may not be present. Is used by
		objects_from_files to move files if speceified.'''
		return OLD_FILES_DIR / '{}.json'.format(self.entry_uuid)

	def load_old(self):
		'''Loads the old filename and sets attributes accordingly'''
		old_path = self.get_old_file_path()
		content = load_from_json_file(old_path)
		if content is not None:
			self.old_dn = content['dn']
			self.old_attributes = content['object']
			self.old_options = content['options']
		self._old_loaded = True

	def was_added(self):
		'''Whether this object is new. Needs the have read an old file
		for this to give a meaningful response'''
		if self._old_loaded is False:
			return None
		return self.old_dn is None

	def was_modified(self):
		'''Whether this object was modified. Needs the have read an old
		file for this to give a meaningful response'''
		if self.was_deleted():
			return False
		if self._old_loaded is False:
			return None
		return not self.was_added() and not self.was_deleted()

	def was_deleted(self):
		'''Whether this object was deleted.'''
		return self.attributes is None

	def __repr__(self):
		if not self._old_loaded:
			return 'Object({}, {}, {})'.format(self.entry_uuid, self.object_type, self.dn)
		else:
			return 'Object({}, {}, {}, {})'.format(self.entry_uuid, self.object_type, self.dn, self.old_dn)

def objects_from_files(delete_files=True, move_files=False):
	'''Iterates over all JSON files and yields a TriggerObject. After the
	caller is done with it, it can delete or move the file. If it moves the
	file, a copy of this very JSON file is created so that a new run can
	reload it (useful if you need to act on various changes in
	attributes)'''
	for path in sorted(NEW_FILES_DIR.glob('*.json')):
		content = load_from_json_file(path)
		entry_uuid = content['id']
		object_type = content['udm_object_type']
		dn = content['dn']
		attributes = content['object']
		options = content['options']
		obj = TriggerObject(entry_uuid, object_type, dn, attributes, options)
		if move_files:
			obj.load_old()
		if obj.attributes is None and obj.old_attributes is None:
			# happens when creation and deletion happens within one
			# "listener cycle" => nothing happened
			pass
		else:
			yield obj
		if move_files:
			old_file_path = obj.get_old_file_path()
			old_file_path.parent.mkdir(parents=True, exist_ok=True)
			path.rename(old_file_path)
		elif delete_files:
			path.unlink()

def run_on_files(objs, f, stop_at_first_error=True):
	'''Iterate over objects (returned by objects_from_files) and runs a
	function f on this object. May continue to do so even if one iteration
	failed. Returns a reasonable exit code'''
	ret = 0
	for obj in objs:
		try:
			f(obj)
		except Exception:
			traceback.print_exc()
			ret = 1
			if stop_at_first_error:
				break
	return ret

def context_from_attributes(attributes):
	context = Context(id=attributes['contextid'])
	update_context(context, attributes)
	return context

def update_context(context, attributes):
	context.max_quota = attributes['oxQuota']
	context.name = attributes['name']

def context_exists(obj):
	if obj.attributes is None:
		# before delete
		context_id = obj.old_attributes['contextid']
	else:
		# before create
		context_id = obj.attributes['contextid']
	return bool(Context.list(pattern=context_id))

def create_context(obj):
	print('Creating', obj)
	if context_exists(obj):
		print(obj, 'exists. Modifying instead...')
		return modify_context(obj)
	context = context_from_attributes(obj.attributes)
	context.create()

def modify_context(obj):
	print('Modifying', obj)
	if obj.old_attributes:
		context = context_from_attributes(obj.old_attributes)
	else:
		print(obj, 'has no old data. Resync?')
		context = context_from_attributes(obj.attributes)
	update_context(context, obj.attributes)
	context.modify()

def delete_context(obj):
	print('Deleting', obj)
	if not context_exists(obj):
		print(obj, 'does not exist. Doing nothing...')
		return
	context = context_from_attributes(obj.old_attributes)
	context.remove()

def create_user(obj):
	print('Creating', obj)
	if obj.attributes['isOxUser'] == 'Not':
		print(obj, 'is no OX user. Not creating...')
		return
	context_id = obj.attributes['oxContext'] or DEFAULT_CONTEXT
	#context_admin = get_admin_user(context_id)
	user = User(
		context_id = context_id,
		#context_admin = context_admin,
		name = obj.attributes['username'],
		display_name = obj.attributes['oxDisplayName'],
		password = None,
		given_name = obj.attributes['firstname'],
		sur_name = obj.attributes['lastname'],
		primary_email = obj.attributes['mailPrimaryAddress'],
		email1 = obj.attributes['e-mail'],
		#aliases = obj.attributes[],
		anniversary = obj.attributes['oxAnniversary'],
		#assistant_name = obj.attributes[],
		birthday = obj.attributes['oxBirthday'],
		branches = obj.attributes['oxBranches'],
		#business_category = obj.attributes[],
		#categories = obj.attributes[],
		#cellular_telephone1 = obj.attributes[],
		#cellular_telephone2 = obj.attributes[],
		city_business = obj.attributes['city'],  # ???
		city_home = obj.attributes['oxCityHome'],
		city_other = obj.attributes['oxCityOther'],
		commercial_register = obj.attributes['oxCommercialRegister'],
		#company = obj.attributes[],
		country_business = obj.attributes['oxCountryBusiness'],
		country_home = obj.attributes['oxCountryHome'],
		country_other = obj.attributes['oxCountryOther'],
		#drive_user_folder_mode = obj.attributes[],
		#default_sender_address = obj.attributes[],
		#default_group = obj.attributes[],
		department = obj.attributes['oxDepartment'],
		email2 = obj.attributes['oxEmail2'],
		email3 = obj.attributes['oxEmail3'],
		employee_type = obj.attributes['employeeType'],  # ???
		fax_business = obj.attributes['oxFaxBusiness'],
		fax_home = obj.attributes['oxFaxHome'],
		fax_other = obj.attributes['oxFaxOther'],
		#filestore_id = obj.attributes[],
		#filestore_name = obj.attributes[],
		#folder_tree = obj.attributes[],
		#gui_preferences_for_soap = obj.attributes[],
		#gui_spam_filter_enabled = obj.attributes[],
		#imap_login = obj.attributes[],
		#imap_port = obj.attributes[],
		#imap_schema = obj.attributes[],
		#imap_server = obj.attributes[],
		#imap_server_string = obj.attributes[],
		#info = obj.attributes[],
		instant_messenger1 = obj.attributes['oxInstantMessenger1'],
		instant_messenger2 = obj.attributes['oxInstantMessenger2'],
		language = obj.attributes['oxLanguage'],
		#mail_folder_confirmed_ham_name = obj.attributes[],
		#mail_folder_confirmed_spam_name = obj.attributes[],
		#mail_folder_drafts_name = obj.attributes[],
		#mail_folder_sent_name = obj.attributes[],
		#mail_folder_spam_name = obj.attributes[],
		#mail_folder_trash_name = obj.attributes[],
		#mail_folder_archive_full_name = obj.attributes[],
		#mail_enabled = obj.attributes[],
		manager_name = obj.attributes['oxManagerName'],
		marital_status = obj.attributes['oxMarialStatus'],
		#max_quota = obj.attributes[],
		middle_name = obj.attributes['oxMiddleName'],
		nickname = obj.attributes['oxNickName'],
		note = obj.attributes['oxNote'],
		number_of_children = obj.attributes['oxNumOfChildren'],
		#number_of_employee = obj.attributes[],
		#password_mech = obj.attributes[],
		#password_expired = obj.attributes[],
		position = obj.attributes['oxPosition'],
		postal_code_business = obj.attributes['postcode'],  # ???
		postal_code_home = obj.attributes['oxPostalCodeHome'],
		postal_code_other = obj.attributes['oxPostalCodeOther'],
		profession = obj.attributes['oxProfession'],
		#room_number = obj.attributes[],
		sales_volume = obj.attributes['oxSalesVolume'],
		#smtp_port = obj.attributes[],
		#smtp_schema = obj.attributes[],
		#smtp_server = obj.attributes[],
		#smtp_server_string = obj.attributes[],
		spouse_name = obj.attributes['oxSpouseName'],
		state_business = obj.attributes['oxStateBusiness'],
		state_home = obj.attributes['oxStateHome'],
		state_other = obj.attributes['oxStateOther'],
		#street_business = obj.attributes[],
		street_home = obj.attributes['oxStreetHome'],
		street_other = obj.attributes['oxStreetOther'],
		suffix = obj.attributes['oxSuffix'],
		tax_id = obj.attributes['oxTaxId'],
		telephone_assistant = obj.attributes['oxTelephoneAssistant'],
		#telephone_business1 = obj.attributes[],
		#telephone_business2 = obj.attributes[],
		#telephone_callback = obj.attributes[],
		telephone_car = obj.attributes['oxTelephoneCar'],
		telephone_company = obj.attributes['oxTelephoneCompany'],
		#telephone_home1 = obj.attributes[],
		#telephone_home2 = obj.attributes[],
		telephone_ip = obj.attributes['oxTelephoneIp'],
		#telephone_isdn = obj.attributes[],
		telephone_other = obj.attributes['oxTelephoneOther'],
		#telephone_pager = obj.attributes[],
		#telephone_primary = obj.attributes[],
		#telephone_radio = obj.attributes[],
		telephone_telex = obj.attributes['oxTelephoneTelex'],
		telephone_ttytdd = obj.attributes['oxTelephoneTtydd'],
		timezone = obj.attributes['oxTimeZone'],
		title = obj.attributes['title'],  # ???
		#upload_file_size_limit = obj.attributes[],
		#upload_file_size_limitPerFile = obj.attributes[],
		url = obj.attributes['oxUrl'],
		#used_quota = obj.attributes['oxUserQuota'], ???
		#user_attributes = obj.attributes[],
		userfield01 = obj.attributes['oxUserfield01'],
		userfield02 = obj.attributes['oxUserfield02'],
		userfield03 = obj.attributes['oxUserfield03'],
		userfield04 = obj.attributes['oxUserfield04'],
		userfield05 = obj.attributes['oxUserfield05'],
		userfield06 = obj.attributes['oxUserfield06'],
		userfield07 = obj.attributes['oxUserfield07'],
		userfield08 = obj.attributes['oxUserfield08'],
		userfield09 = obj.attributes['oxUserfield09'],
		userfield10 = obj.attributes['oxUserfield10'],
		userfield11 = obj.attributes['oxUserfield11'],
		userfield12 = obj.attributes['oxUserfield12'],
		userfield13 = obj.attributes['oxUserfield13'],
		userfield14 = obj.attributes['oxUserfield14'],
		userfield15 = obj.attributes['oxUserfield15'],
		userfield16 = obj.attributes['oxUserfield16'],
		userfield17 = obj.attributes['oxUserfield17'],
		userfield18 = obj.attributes['oxUserfield18'],
		userfield19 = obj.attributes['oxUserfield19'],
		userfield20 = obj.attributes['oxUserfield20'],
		#primary_account_name = obj.attributes[],
		#convert_drive_user_folders = obj.attributes[],
	)
	print(user)
	raise ValueError('oh')
	user.create()

def modify_user(obj):
	print('Modifying', obj)
	if obj.old_attributes['isOxUser'] == 'Not':
		print(obj, 'was no OX user before. Creating instead')
		return create_user(obj)
	return create_user(obj)
	raise NotImplementedError()

def delete_user(obj):
	print('Deleting', obj)
	raise NotImplementedError()

def do(obj):
	'''This is your main function. Implement all your logic here'''
	if obj.object_type == 'oxmail/oxcontext':
		if obj.was_added():
			create_context(obj)
		elif obj.was_modified():
			modify_context(obj)
		elif obj.was_deleted():
			delete_context(obj)
	if obj.object_type == 'users/user':
		if obj.attributes['username'] == 'oxadmin':
			# FIXME
			return
		if obj.was_added():
			create_user(obj)
		elif obj.was_modified():
			modify_user(obj)
		elif obj.was_deleted():
			delete_user(obj)

objs = objects_from_files(delete_files=False, move_files=True)
sys.exit(run_on_files(objs, do))
