---

include:
  - project: "univention/customers/dataport/upx/common-ci"
    file:
      - "defaults/souvap-workflow.yaml"
      - "templates/souvap.yaml"
      - "templates/kaniko.yaml"
      - "jobs/package-and-publish-helm-charts.yaml"
  - project: "univention/documentation/sphinx-docker"
    file: "pipeline/sphinx.yml"

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_OPEN_MERGE_REQUESTS'
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED == "true"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "webide"'

stages:
  - "build"
  - "package"
  - "publish"
  - "docs-build"
  - "docs-merge"
  - "docs-production"

variables:
  APP_VERSION:
    value: ""
    description: "Docker tag"
  # Variables for sphinx-docs
  DOCS_DIR: "docs"
  LANG: "C.UTF-8"
  DEBIAN_FRONTEND: "noninteractive"
  UNIVENTION_BASECONF: "/dev/null"
  DOC_TARGET_VERSION: "2.2.7"
  DOC_TARGET_NAME: "ox-connector-app"
  DOC_TARGET_PATH: "${DOC_TARGET_NAME}/${DOC_TARGET_VERSION}"

  # Variables for ".push-image-souvap" include
  SOUVAP_DOCKER_ACCESS_USER: "gitlab-ci-knut"
  #SOUVAP_DOCKER_ACCESS_TOKEN: "${SOUVAP_DOCKER_ACCESS_TOKEN}"
  SOUVAP_REGISTRY_HOST: "registry.souvap-univention.de"
  SOUVAP_REGISTRY_PATH: "souvap/tooling/images/ox-connector"
  SOUVAP_REGISTRY_REPO: "${SOUVAP_REGISTRY_HOST}/${SOUVAP_REGISTRY_PATH}"

  # Variables for ".publish-helm-charts-souvap" include
  SOUVAP_HELM_ACCESS_USER: "gitlab-ci-knut"
  #SOUVAP_HELM_ACCESS_TOKEN: "${SOUVAP_HELM_ACCESS_TOKEN}"
  SOUVAP_API_V4_URL: "https://gitlab.souvap-univention.de/api/v4"
  SOUVAP_HELM_PROJECT_ID: "128"

.common-semantic-release:
  image: "registry.souvap-univention.de/souvap/tooling/images/semantic-release-patched@${IMAGE_HASH}"
  variables:
    IMAGE_HASH: "sha256:da70137c84f27851fc756d5f7bacdeca701544cbfa423f29c37405be94544f92"
    GIT_DEPTH: "500"
    GIT_STRATEGY: "clone"
    GIT_SUBMODULE_STRATEGY: "none"

prepare:
  stage: ".pre"
  extends: ".common-semantic-release"
  artifacts:
    reports:
      dotenv: "${CI_PROJECT_DIR}/deploy.env"
  script:
    - |
      if [[ -z "${GITLAB_TOKEN}" ]]; then
        echo "ERROR: The variable GITLAB_TOKEN is not set"
        exit 1
      fi
      export SEMANTIC_VERSION=$(
        semantic-release \
          --dry-run \
          --no-ci \
          --branches "${CI_COMMIT_REF_NAME}" \
          --plugins "@semantic-release/gitlab" |
        grep --only-matching --perl-regexp "Published release [0-9]+\.[0-9]+\.[0-9]+ on" |
        grep --only-matching --perl-regexp "[0-9]+\.[0-9]+\.[0-9]+"
      )
      if [[ -z "${SEMANTIC_VERSION}" ]]; then
        echo "ERROR: Failed extract SEMANTIC_VERSION from semantic-release output"
        exit 1
      fi
      echo "Using SEMANTIC_VERSION: ${SEMANTIC_VERSION}"
      if [[ "${CI_COMMIT_REF_NAME:-}" != "${CI_DEFAULT_BRANCH:-}" ]]; then
        export RELEASE_VERSION="${SEMANTIC_VERSION}-pre-${CI_COMMIT_REF_SLUG}"
      else
        export RELEASE_VERSION="${SEMANTIC_VERSION}"
      fi
      echo "Using RELEASE_VERSION: ${RELEASE_VERSION}"
      echo "SEMANTIC_VERSION=${SEMANTIC_VERSION}" > ${CI_PROJECT_DIR}/deploy.env
      echo "RELEASE_VERSION=${RELEASE_VERSION}" >> ${CI_PROJECT_DIR}/deploy.env

package-helm-charts:
  needs:
    - job: "prepare"
      artifacts: true
  before_script:
    - |
      echo "Starting before_script"
      if [[ -z "${RELEASE_VERSION}" ]]; then
        echo "Variable RELEASE_VERSION not set"
        exit 1
      else
        echo "Variable RELEASE_VERSION is ${RELEASE_VERSION}"
      fi
      echo "Finishing before_script"

build-appcenter-job:
  stage: "build"
  extends: ".kaniko"
  needs:
    - job: "prepare"
      artifacts: true
  variables:
    DOCKERFILE_PATH: "Dockerfile"
    CI_REGISTRY_IMAGE: "${CI_REGISTRY_IMAGE}/ox-connector-appcenter"
    VERSION: "${RELEASE_VERSION}"
  before_script:
    - |
      # The version build-arg needs to be pip-compataible
      if [[ "${CI_COMMIT_REF_NAME:-}" != "${CI_DEFAULT_BRANCH:-}" ]]; then
        export DOCKER_BUILD_VERSION="${DOC_TARGET_VERSION}-dev"
      else
        export DOCKER_BUILD_VERSION="${DOC_TARGET_VERSION}"
      fi
      export KANIKO_ARGS="--build-arg version=${DOCKER_BUILD_VERSION}"

build-standalone-final-image:
  stage: "build"
  extends: ".kaniko"
  needs:
    - job: "prepare"
      artifacts: true
  variables:
    DOCKERFILE_PATH: "Dockerfile.standalone"
    CI_REGISTRY_IMAGE: "${CI_REGISTRY_IMAGE}/ox-connector-standalone"
    KANIKO_ARGS: "--target=final --build-arg version=${RELEASE_VERSION}"
    VERSION: "${RELEASE_VERSION}"

build-standalone-test-image:
  stage: "build"
  extends: ".kaniko"
  needs:
    - job: "prepare"
      artifacts: true
  variables:
    DOCKERFILE_PATH: "Dockerfile.standalone"
    CI_REGISTRY_IMAGE: "${CI_REGISTRY_IMAGE}/ox-connector-standalone-test"
    KANIKO_ARGS: "--target=test --build-arg version=${RELEASE_VERSION}"
    VERSION: "${RELEASE_VERSION}"

push-image-souvap-appcenter-job:
  stage: "publish"
  needs:
    - job: "build-appcenter-job"
  extends: ".push-image-souvap"
  variables:
    CI_REGISTRY_IMAGE: "${CI_REGISTRY_IMAGE}/ox-connector-appcenter"
    SOUVAP_IMAGE_NAME: "ox-connector-appcenter"

push-image-souvap-standalone-job:
  stage: "publish"
  needs:
    - job: "build-standalone-final-image"
  extends: ".push-image-souvap"
  variables:
    CI_REGISTRY_IMAGE: "${CI_REGISTRY_IMAGE}/ox-connector-standalone"
    SOUVAP_IMAGE_NAME: "ox-connector-standalone"

publish-helm-charts-souvap:
  extends: .publish-helm-charts-souvap

docs-linkcheck:
  stage: "docs-build"
  extends: ".sphinx-linkcheck-template"
  rules:
    - changes:
        - "$DOCS_DIR/**/*"

docs-spelling:
  stage: "docs-build"
  extends: ".sphinx-spelling-template"
  rules:
    - changes:
        - "$DOCS_DIR/**/*"

docs-html:
  stage: "docs-build"
  extends: ".sphinx-html-template"
  rules:
    - changes:
        - "$DOCS_DIR/**/*"

docs-pdf:
  stage: "docs-build"
  extends: ".sphinx-pdf-template"
  rules:
    - changes:
        - "$DOCS_DIR/**/*"

docs-warnings:
  stage: "docs-build"
  extends: ".sphinx-warnings-template"
  rules:
    - changes:
        - "$DOCS_DIR/**/*"

docs-merge-to-one-artifact:
  stage: "docs-merge"
  extends: ".sphinx-merge-template"
  needs:
    - job: "docs-html"
    - job: "docs-pdf"
    - job: "docs-spelling"
      artifacts: false
    - job: "docs-linkcheck"
      artifacts: false
  rules:
    - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      changes:
        - "$DOCS_DIR/**/*"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      changes:
        - "$DOCS_DIR/**/*"
      when: "manual"

# The template has inherit:variables:false to prevent the passing of pipeline
# variables to downstream, and therefore $DOCS_DIR is not available here.
docs-create-production-merge-request:
  stage: "docs-production"
  extends: ".sphinx-docs-merge-request-template"
  needs:
    - job: "docs-merge-to-one-artifact"
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      changes:
        - "docs/**/*"

compute-image-name:
  stage: "build"
  extends: ".kaniko_pre"
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $APP_VERSION != ""

build-docker-image:
  stage: "build"
  extends: ".kaniko"
  variables:
    DOCKERFILE_PATH: "Dockerfile"
    KANIKO_ARGS: "--target=test --build-arg version=$DOC_TARGET_VERSION"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

upload-docker-image:
  stage: "publish"
  needs:
    - job: compute-image-name
  rules:
    - if: $APP_VERSION != ""
  variables:
    GIT_STRATEGY: none
  image:
    name: "docker-registry.knut.univention.de/knut/ssh"
    entrypoint: [""]
  before_script:
    - chmod 0600 "${SSH_PRIVATE_KEY}"
  script:
    - ssh -o BatchMode=yes -i "${SSH_PRIVATE_KEY}" -l root docker.knut.univention.de
      "docker pull ${BUILD_IMAGE_TAG}"
    - ssh -o BatchMode=yes -i "${SSH_PRIVATE_KEY}" -l root docker.knut.univention.de
      "docker tag ${BUILD_IMAGE_TAG} docker-upload.software-univention.de/ox-connector:${APP_VERSION}"
    - ssh -o BatchMode=yes -i "${SSH_PRIVATE_KEY}" -l root docker.knut.univention.de
      "docker push docker-upload.software-univention.de/ox-connector:${APP_VERSION}"

release:
  stage: ".post"
  extends: ".common-semantic-release"
  rules:
    - when: on_success
      if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
  artifacts:
    paths:
      - "CHANGELOG.md"
  script:
    - |
      if test -f "${CI_PROJECT_DIR}/.releaserc"; then
        PLUGINS=
      else
        PLUGINS="--plugins @semantic-release/gitlab,@semantic-release/release-notes-generator,@semantic-release/changelog"
      fi
    - "semantic-release --branches ${CI_COMMIT_REF_NAME} ${PLUGINS}"

...
